// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Screen> with children renders correctly 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Screen
    dispatch={[Function]}
    left={
      Object {
        "icon": Object {
          "name": "home",
        },
        "type": "back",
      }
    }
    title="Test Screen"
  >
    <Styled(Text)>
      Children
    </Styled(Text)>
  </Screen>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <Styled(Header)
          hasTabs={false}
        >
          <Styled(Left)>
            <Styled(Button)
              onPress={[Function]}
              transparent={true}
            >
              <Styled(Icon)
                name="chevron-left"
                type="Feather"
              />
            </Styled(Button)>
          </Styled(Left)>
          <Styled(Body)>
            <Styled(Title)>
              Test Screen
            </Styled(Title)>
          </Styled(Body)>
          <Styled(Right) />
        </Styled(Header)>,
        null,
        <Styled(Content)>
          <Styled(Text)>
            Children
          </Styled(Text)>
        </Styled(Content)>,
      ],
      "style": Object {
        "backgroundColor": "#f4f4f4",
      },
      "virtual": undefined,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Styled(Left)>
              <Styled(Button)
                onPress={[Function]}
                transparent={true}
              >
                <Styled(Icon)
                  name="chevron-left"
                  type="Feather"
                />
              </Styled(Button)>
            </Styled(Left)>,
            <Styled(Body)>
              <Styled(Title)>
                Test Screen
              </Styled(Title)>
            </Styled(Body)>,
            <Styled(Right) />,
          ],
          "hasTabs": false,
          "virtual": undefined,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Styled(Button)
                onPress={[Function]}
                transparent={true}
              >
                <Styled(Icon)
                  name="chevron-left"
                  type="Feather"
                />
              </Styled(Button)>,
              "virtual": undefined,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Styled(Icon)
                  name="chevron-left"
                  type="Feather"
                />,
                "onPress": [Function],
                "transparent": true,
                "virtual": undefined,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "name": "chevron-left",
                  "type": "Feather",
                  "virtual": undefined,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Styled(Title)>
                Test Screen
              </Styled(Title)>,
              "virtual": undefined,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Test Screen",
                "virtual": undefined,
              },
              "ref": null,
              "rendered": "Test Screen",
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": undefined,
              "virtual": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      null,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Styled(Text)>
            Children
          </Styled(Text)>,
          "virtual": undefined,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "Children",
            "virtual": undefined,
          },
          "ref": null,
          "rendered": "Children",
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Styled(Header)
            hasTabs={false}
          >
            <Styled(Left)>
              <Styled(Button)
                onPress={[Function]}
                transparent={true}
              >
                <Styled(Icon)
                  name="chevron-left"
                  type="Feather"
                />
              </Styled(Button)>
            </Styled(Left)>
            <Styled(Body)>
              <Styled(Title)>
                Test Screen
              </Styled(Title)>
            </Styled(Body)>
            <Styled(Right) />
          </Styled(Header)>,
          null,
          <Styled(Content)>
            <Styled(Text)>
              Children
            </Styled(Text)>
          </Styled(Content)>,
        ],
        "style": Object {
          "backgroundColor": "#f4f4f4",
        },
        "virtual": undefined,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <Styled(Left)>
                <Styled(Button)
                  onPress={[Function]}
                  transparent={true}
                >
                  <Styled(Icon)
                    name="chevron-left"
                    type="Feather"
                  />
                </Styled(Button)>
              </Styled(Left)>,
              <Styled(Body)>
                <Styled(Title)>
                  Test Screen
                </Styled(Title)>
              </Styled(Body)>,
              <Styled(Right) />,
            ],
            "hasTabs": false,
            "virtual": undefined,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Styled(Button)
                  onPress={[Function]}
                  transparent={true}
                >
                  <Styled(Icon)
                    name="chevron-left"
                    type="Feather"
                  />
                </Styled(Button)>,
                "virtual": undefined,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <Styled(Icon)
                    name="chevron-left"
                    type="Feather"
                  />,
                  "onPress": [Function],
                  "transparent": true,
                  "virtual": undefined,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "name": "chevron-left",
                    "type": "Feather",
                    "virtual": undefined,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Styled(Title)>
                  Test Screen
                </Styled(Title)>,
                "virtual": undefined,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Test Screen",
                  "virtual": undefined,
                },
                "ref": null,
                "rendered": "Test Screen",
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": undefined,
                "virtual": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        null,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Styled(Text)>
              Children
            </Styled(Text)>,
            "virtual": undefined,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Children",
              "virtual": undefined,
            },
            "ref": null,
            "rendered": "Children",
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
    "context": Object {
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
    },
  },
}
`;

exports[`<Screen> with tabs renders correctly 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Screen
    dispatch={[Function]}
    left={
      Object {
        "icon": Object {
          "name": "home",
        },
        "type": "back",
      }
    }
    tabs={
      Array [
        Object {
          "content": <Styled(Text)>
            Tab1 Content
          </Styled(Text)>,
          "icon": "home",
          "title": "Tab1",
        },
        Object {
          "content": <Styled(Text)>
            Tab2 Content
          </Styled(Text)>,
          "icon": "home",
          "title": "Tab2",
        },
      ]
    }
    title="Test Screen"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <Styled(Header)
          hasTabs={true}
        >
          <Styled(Left)>
            <Styled(Button)
              onPress={[Function]}
              transparent={true}
            >
              <Styled(Icon)
                name="chevron-left"
                type="Feather"
              />
            </Styled(Button)>
          </Styled(Left)>
          <Styled(Body)>
            <Styled(Title)>
              Test Screen
            </Styled(Title)>
          </Styled(Body)>
          <Styled(Right) />
        </Styled(Header)>,
        <ScrollableTabView
          contentProps={Object {}}
          initialPage={0}
          locked={false}
          onChangeTab={[Function]}
          onScroll={[Function]}
          page={-1}
          prerenderingSiblingsNumber={0}
          scrollWithoutAnimation={false}
          tabBarPosition="top"
        >
          <Styled(Tab)
            heading={
              <Styled(TabHeadingNB)>
                <Styled(Icon)
                  name="home"
                />
                <Styled(Text)>
                  Tab1
                </Styled(Text)>
              </Styled(TabHeadingNB)>
            }
          >
            <Styled(Text)>
              Tab1 Content
            </Styled(Text)>
          </Styled(Tab)>
          <Styled(Tab)
            heading={
              <Styled(TabHeadingNB)>
                <Styled(Icon)
                  name="home"
                />
                <Styled(Text)>
                  Tab2
                </Styled(Text)>
              </Styled(TabHeadingNB)>
            }
          >
            <Styled(Text)>
              Tab2 Content
            </Styled(Text)>
          </Styled(Tab)>
        </ScrollableTabView>,
        null,
      ],
      "style": Object {
        "backgroundColor": "#f4f4f4",
      },
      "virtual": undefined,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Styled(Left)>
              <Styled(Button)
                onPress={[Function]}
                transparent={true}
              >
                <Styled(Icon)
                  name="chevron-left"
                  type="Feather"
                />
              </Styled(Button)>
            </Styled(Left)>,
            <Styled(Body)>
              <Styled(Title)>
                Test Screen
              </Styled(Title)>
            </Styled(Body)>,
            <Styled(Right) />,
          ],
          "hasTabs": true,
          "virtual": undefined,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Styled(Button)
                onPress={[Function]}
                transparent={true}
              >
                <Styled(Icon)
                  name="chevron-left"
                  type="Feather"
                />
              </Styled(Button)>,
              "virtual": undefined,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Styled(Icon)
                  name="chevron-left"
                  type="Feather"
                />,
                "onPress": [Function],
                "transparent": true,
                "virtual": undefined,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "name": "chevron-left",
                  "type": "Feather",
                  "virtual": undefined,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Styled(Title)>
                Test Screen
              </Styled(Title)>,
              "virtual": undefined,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Test Screen",
                "virtual": undefined,
              },
              "ref": null,
              "rendered": "Test Screen",
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": undefined,
              "virtual": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Styled(Tab)
              heading={
                <Styled(TabHeadingNB)>
                  <Styled(Icon)
                    name="home"
                  />
                  <Styled(Text)>
                    Tab1
                  </Styled(Text)>
                </Styled(TabHeadingNB)>
              }
            >
              <Styled(Text)>
                Tab1 Content
              </Styled(Text)>
            </Styled(Tab)>,
            <Styled(Tab)
              heading={
                <Styled(TabHeadingNB)>
                  <Styled(Icon)
                    name="home"
                  />
                  <Styled(Text)>
                    Tab2
                  </Styled(Text)>
                </Styled(TabHeadingNB)>
              }
            >
              <Styled(Text)>
                Tab2 Content
              </Styled(Text)>
            </Styled(Tab)>,
          ],
          "contentProps": Object {},
          "initialPage": 0,
          "locked": false,
          "onChangeTab": [Function],
          "onScroll": [Function],
          "page": -1,
          "prerenderingSiblingsNumber": 0,
          "scrollWithoutAnimation": false,
          "tabBarPosition": "top",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "0",
            "nodeType": "class",
            "props": Object {
              "children": <Styled(Text)>
                Tab1 Content
              </Styled(Text)>,
              "heading": <Styled(TabHeadingNB)>
                <Styled(Icon)
                  name="home"
                />
                <Styled(Text)>
                  Tab1
                </Styled(Text)>
              </Styled(TabHeadingNB)>,
              "virtual": undefined,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Tab1 Content",
                "virtual": undefined,
              },
              "ref": null,
              "rendered": "Tab1 Content",
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "1",
            "nodeType": "class",
            "props": Object {
              "children": <Styled(Text)>
                Tab2 Content
              </Styled(Text)>,
              "heading": <Styled(TabHeadingNB)>
                <Styled(Icon)
                  name="home"
                />
                <Styled(Text)>
                  Tab2
                </Styled(Text)>
              </Styled(TabHeadingNB)>,
              "virtual": undefined,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Tab2 Content",
                "virtual": undefined,
              },
              "ref": null,
              "rendered": "Tab2 Content",
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      null,
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Styled(Header)
            hasTabs={true}
          >
            <Styled(Left)>
              <Styled(Button)
                onPress={[Function]}
                transparent={true}
              >
                <Styled(Icon)
                  name="chevron-left"
                  type="Feather"
                />
              </Styled(Button)>
            </Styled(Left)>
            <Styled(Body)>
              <Styled(Title)>
                Test Screen
              </Styled(Title)>
            </Styled(Body)>
            <Styled(Right) />
          </Styled(Header)>,
          <ScrollableTabView
            contentProps={Object {}}
            initialPage={0}
            locked={false}
            onChangeTab={[Function]}
            onScroll={[Function]}
            page={-1}
            prerenderingSiblingsNumber={0}
            scrollWithoutAnimation={false}
            tabBarPosition="top"
          >
            <Styled(Tab)
              heading={
                <Styled(TabHeadingNB)>
                  <Styled(Icon)
                    name="home"
                  />
                  <Styled(Text)>
                    Tab1
                  </Styled(Text)>
                </Styled(TabHeadingNB)>
              }
            >
              <Styled(Text)>
                Tab1 Content
              </Styled(Text)>
            </Styled(Tab)>
            <Styled(Tab)
              heading={
                <Styled(TabHeadingNB)>
                  <Styled(Icon)
                    name="home"
                  />
                  <Styled(Text)>
                    Tab2
                  </Styled(Text)>
                </Styled(TabHeadingNB)>
              }
            >
              <Styled(Text)>
                Tab2 Content
              </Styled(Text)>
            </Styled(Tab)>
          </ScrollableTabView>,
          null,
        ],
        "style": Object {
          "backgroundColor": "#f4f4f4",
        },
        "virtual": undefined,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <Styled(Left)>
                <Styled(Button)
                  onPress={[Function]}
                  transparent={true}
                >
                  <Styled(Icon)
                    name="chevron-left"
                    type="Feather"
                  />
                </Styled(Button)>
              </Styled(Left)>,
              <Styled(Body)>
                <Styled(Title)>
                  Test Screen
                </Styled(Title)>
              </Styled(Body)>,
              <Styled(Right) />,
            ],
            "hasTabs": true,
            "virtual": undefined,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Styled(Button)
                  onPress={[Function]}
                  transparent={true}
                >
                  <Styled(Icon)
                    name="chevron-left"
                    type="Feather"
                  />
                </Styled(Button)>,
                "virtual": undefined,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <Styled(Icon)
                    name="chevron-left"
                    type="Feather"
                  />,
                  "onPress": [Function],
                  "transparent": true,
                  "virtual": undefined,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "name": "chevron-left",
                    "type": "Feather",
                    "virtual": undefined,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Styled(Title)>
                  Test Screen
                </Styled(Title)>,
                "virtual": undefined,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Test Screen",
                  "virtual": undefined,
                },
                "ref": null,
                "rendered": "Test Screen",
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": undefined,
                "virtual": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <Styled(Tab)
                heading={
                  <Styled(TabHeadingNB)>
                    <Styled(Icon)
                      name="home"
                    />
                    <Styled(Text)>
                      Tab1
                    </Styled(Text)>
                  </Styled(TabHeadingNB)>
                }
              >
                <Styled(Text)>
                  Tab1 Content
                </Styled(Text)>
              </Styled(Tab)>,
              <Styled(Tab)
                heading={
                  <Styled(TabHeadingNB)>
                    <Styled(Icon)
                      name="home"
                    />
                    <Styled(Text)>
                      Tab2
                    </Styled(Text)>
                  </Styled(TabHeadingNB)>
                }
              >
                <Styled(Text)>
                  Tab2 Content
                </Styled(Text)>
              </Styled(Tab)>,
            ],
            "contentProps": Object {},
            "initialPage": 0,
            "locked": false,
            "onChangeTab": [Function],
            "onScroll": [Function],
            "page": -1,
            "prerenderingSiblingsNumber": 0,
            "scrollWithoutAnimation": false,
            "tabBarPosition": "top",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "0",
              "nodeType": "class",
              "props": Object {
                "children": <Styled(Text)>
                  Tab1 Content
                </Styled(Text)>,
                "heading": <Styled(TabHeadingNB)>
                  <Styled(Icon)
                    name="home"
                  />
                  <Styled(Text)>
                    Tab1
                  </Styled(Text)>
                </Styled(TabHeadingNB)>,
                "virtual": undefined,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Tab1 Content",
                  "virtual": undefined,
                },
                "ref": null,
                "rendered": "Tab1 Content",
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": "1",
              "nodeType": "class",
              "props": Object {
                "children": <Styled(Text)>
                  Tab2 Content
                </Styled(Text)>,
                "heading": <Styled(TabHeadingNB)>
                  <Styled(Icon)
                    name="home"
                  />
                  <Styled(Text)>
                    Tab2
                  </Styled(Text)>
                </Styled(TabHeadingNB)>,
                "virtual": undefined,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Tab2 Content",
                  "virtual": undefined,
                },
                "ref": null,
                "rendered": "Tab2 Content",
                "type": [Function],
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        null,
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
    "context": Object {
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
    },
  },
}
`;
